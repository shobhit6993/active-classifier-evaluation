import numpy
from scipy.stats import bernoulli

class ExponentialClassifierSim(object):
    """Simulates a classifier with accuracy sampled from 
    an exponential distribution.
    
    Attributes:
        accuracy (float64): Accuracy of the classifier.
        beta (float64): param for exponential distribution, with mean = beta.
        mode (string): 'dense_high_scorers' to favor high accuracy classifier.
            'dense_low_scorers' to favor low accuracy classifier.
    """
    def __init__(self, beta, mode):
        self.beta = beta
        self.mode = mode
        self.accuracy = self.__generate_accuracy()
        self.estimated_accuracy = 0.0
        print self.accuracy

    def __generate_accuracy(self):
        """Generates accuracy for the classifier
        
        Accuracy is generated by sampling from a truncated exponential
        distribution. Since exp distribution favors values closer to 0, 
        (1-generated_accuracy) is set as accuracy if mode is dense_high_scorers.
        
        Returns:
            float64: Accuracy of the classifier.
        """
        v = numpy.random.exponential(self.beta)
        while v > 1.0:
            v = numpy.random.exponential(self.beta)
            
        if self.mode == 'dense_high_scorers':
            return 1.0 - v
        else:
            return v

    def predict(self, target):
        """Returns predictions for the classifier. Since this is a simulated
        classifier, amusingly, the predict function takes as argument the 
        gold labels.
        
        Args:
            target (list): List of gold labels for the dataset of items.
        
        Returns:
            list: Predictions for the classifier..
        """
        # TODO(Shobhit): Check with Matt if this is the right way
        prediction = []
        for t in target:
            v = bernoulli.rvs(self.accuracy)
            if v == 1:   # success
                prediction.append(t)
            else:       # failure
                prediction.append((t+1) % 2)

        return prediction
        # return bernoulli.rvs(self.accuracy, size=len(features)).tolist()
